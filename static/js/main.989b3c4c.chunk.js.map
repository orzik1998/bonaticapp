{"version":3,"sources":["components/AddForm.js","components/table.jsx","App.js","serviceWorker.js","index.js"],"names":["AddForm","restFetch","useState","invent","setInvent","family","setFamily","genus","setGenus","kind","setKind","latitude","setLatitude","longitude","setLongitude","country","setCountry","region","setRegion","area","setArea","additional_info","setAdditionInfo","collectors","setCollectors","detectors","setDetectors","collected","setCollected","detected","setDetected","trigger","modal","closeOnDocumentClick","TextField","label","type","value","onChange","e","target","multiline","id","InputLabelProps","shrink","Button","onClick","isNaN","parseInt","alert","variant","color","InfoTable","props","className","photo","src","TableRow","split","TableComponent","this","tableData","map","plant","key","colSpan","length","React","Component","startState","collectedStart","collectedEnd","collector","detector","options","method","data","fetch","headers","body","JSON","stringify","then","response","json","App","state","filterUpdate","setState","table","filterClear","isSearchable","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.989b3c4c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport { Grid, TextField, Button } from '@material-ui/core';\r\n\r\nexport default function AddForm({ restFetch }) {\r\n    const [invent, setInvent] = useState('');\r\n    const [family, setFamily] = useState('');\r\n    const [genus, setGenus] = useState('');\r\n    const [kind, setKind] = useState('');\r\n    const [latitude, setLatitude] = useState('');\r\n    const [longitude, setLongitude] = useState('');\r\n    const [country, setCountry] = useState('');\r\n    const [region, setRegion] = useState('');\r\n    const [area, setArea] = useState('');\r\n    const [additional_info, setAdditionInfo] = useState('');\r\n    const [collectors, setCollectors] = useState('');\r\n    const [detectors, setDetectors] = useState('');\r\n    const [collected, setCollected] = useState('2017-05-24 10:30');\r\n    const [detected, setDetected] = useState('2017-05-24 10:30');\r\n\r\n    const addPlant = () => {\r\n        setInvent(isNaN(parseInt(invent))?'':parseInt(invent));\r\n        setLatitude(isNaN(parseInt(latitude))?'':parseInt(latitude));\r\n        setLongitude(isNaN(parseInt(longitude))?'':parseInt(longitude));\r\n\r\n        if(!invent || !family || !genus || \r\n            !kind || !latitude || !longitude || \r\n            !country || !region || !area || \r\n            !additional_info || !collectors || !detectors ||\r\n            !collected) return alert('Не все поля верно заполнены');\r\n\r\n        restFetch('addPlant', {\r\n            invent, family, genus,\r\n            kind, latitude, longitude,\r\n            country, region, area,\r\n            additional_info, collectors,\r\n            detectors, collected, detected\r\n        });\r\n    };\r\n\r\n    return <Popup\r\n        trigger={<button>Добавить растение</button>}\r\n        modal\r\n        closeOnDocumentClick\r\n    >\r\n        <TextField\r\n            label=\"Инвент. номер\"\r\n            type=\"text\"\r\n            value={invent}\r\n            onChange={e => setInvent(e.target.value)}\r\n        />\r\n        <br/>\r\n        <TextField \r\n            label=\"Семейство\"\r\n            type=\"text\"\r\n            value={family}\r\n            onChange={e => setFamily(e.target.value)}\r\n        />\r\n        <TextField \r\n            label=\"Род\"\r\n            type=\"text\"\r\n            value={genus}\r\n            onChange={e => setGenus(e.target.value)}\r\n        />\r\n        <TextField \r\n            label=\"Вид\"\r\n            type=\"text\"\r\n            value={kind}\r\n            onChange={e => setKind(e.target.value)}\r\n        />\r\n        <br/>\r\n        <TextField \r\n            label=\"Широта\"\r\n            type=\"text\"\r\n            value={latitude}\r\n            onChange={e => setLatitude(e.target.value)}\r\n        />\r\n        <TextField\r\n            label=\"Долгота\"\r\n            type=\"text\"\r\n            value={longitude}\r\n            onChange={e => setLongitude(e.target.value)}\r\n        />\r\n        <br/>\r\n        <TextField \r\n            label=\"Страна\"\r\n            type=\"text\"\r\n            value={country}\r\n            onChange={e => setCountry(e.target.value)}\r\n        />\r\n        <TextField \r\n            label=\"Регион\"\r\n            type=\"text\"\r\n            value={region}\r\n            onChange={e => setRegion(e.target.value)}\r\n        />\r\n        <TextField\r\n            label=\"Район\"\r\n            type=\"text\"\r\n            value={area}\r\n            onChange={e => setArea(e.target.value)}\r\n        /><br/>\r\n        <TextField\r\n            label=\"Дополнительно\"\r\n            type=\"text\"\r\n            multiline\r\n            value={additional_info}\r\n            onChange={e => setAdditionInfo(e.target.value)}\r\n        />\r\n        <TextField\r\n            label=\"Коллектор(-ы)\"\r\n            type=\"text\"\r\n            multiline\r\n            value={collectors}\r\n            onChange={e => setCollectors(e.target.value)}\r\n        />\r\n        <TextField\r\n            label=\"Определил(-и)\"\r\n            type=\"text\"\r\n            multiline\r\n            value={detectors}\r\n            onChange={e => setDetectors(e.target.value)}\r\n        /><br/>\r\n        <TextField\r\n            id=\"datetime-local\"\r\n            label=\"Собран\"\r\n            type=\"datetime-local\"\r\n            value={collected}\r\n            onChange={e => setCollected(e.target.value)}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n        />\r\n        <TextField\r\n            id=\"datetime-local\"\r\n            label=\"Определен\"\r\n            type=\"datetime-local\"\r\n            value={detected}\r\n            onChange={e => setDetected(e.target.value)}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n        />\r\n        <p>\r\n            <Button \r\n                onClick={addPlant}\r\n                variant=\"contained\"\r\n                color=\"primary\">Добавить растение</Button>\r\n        </p>\r\n    </Popup>\r\n}","import React from 'react';\r\n\r\nimport Popup from 'reactjs-popup';\r\n\r\nconst InfoTable = (props) => (<div className=\"modal\">\r\n  Инвентаризационный номер: {props.invent}<br/>\r\n  <div>\r\n    Семейство: {props.family}<br/>\r\n    Род: {props.genus}<br/>\r\n    Вид: {props.kind}<br/>\r\n  </div>\r\n  <div>\r\n    Широта: {props.latitude}<br/>\r\n    Долгота: {props.longitude}<br/>\r\n  </div>\r\n  <div>\r\n    Страна: {props.country}<br/>\r\n    Регион: {props.region}<br/>\r\n    Область: {props.area}<br/>\r\n  </div>\r\n  Дополнительно: {props.additional_info}<br/>\r\n  <div>\r\n    Собрал(и): {props.collectors}<br/>\r\n    Определил(и): {props.detectors}<br/>\r\n    Собран(и): {props.detected}<br/>\r\n    Определён(и): {props.collected}<br/>\r\n  </div>\r\n  <hr/>\r\n  { props.photo === 'none' &&\r\n    <div><center>Фотографии нет</center></div>\r\n  }\r\n  { props.photo !== 'none' &&\r\n    <img src={ 'http://fescobalt.com/botanic/photos/'+props.photo } />\r\n  }\r\n</div>);\r\n\r\nconst TableRow = (props) => (<tr>\r\n  <td>{props.id}</td>\r\n  <td>{props.family} {props.genus}</td>\r\n  <td>{props.collected.split(' ')[0]}</td>\r\n  <td>{props.collectors}</td>\r\n  <td>{props.detectors}</td>\r\n  <td><Popup\r\n    trigger={<button className=\"button\">Подробнее</button>}\r\n    modal\r\n    closeOnDocumentClick\r\n  >\r\n    <InfoTable {...props} />\r\n  </Popup></td>\r\n</tr>);\r\n\r\nclass TableComponent extends React.Component {\r\n  render() {\r\n    return (<div className=\"table-container\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Код образца</th>\r\n            <th>Вид</th>\r\n            <th>Дата сбора</th>\r\n            <th>Коллектор(-ы)</th>\r\n            <th>Определил(-и)</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          { this.props.tableData !== null &&\r\n              this.props.tableData.map( plant => <TableRow key={plant.id} {...plant}/> )\r\n          }\r\n          { this.props.tableData === null &&\r\n            <tr><td colSpan=\"5\"><center>Данные загружаются...</center></td></tr>\r\n          }\r\n          { this.props.tableData !== null && \r\n            this.props.tableData.length === 0 &&\r\n            <tr><td colSpan=\"5\"><center>Ничего не найдено</center></td></tr>\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </div>);\r\n  }\r\n}\r\n\r\nexport default TableComponent;\r\n","import React from 'react';\n\nimport Select from 'react-select';\nimport AddForm from './components/AddForm';\n\nimport './App.css';\n\nimport Table from './components/table.jsx';\n\nconst startState = {\n  family: '',\n  genus: '',\n  kind: '',\n  country: '',\n  region: '',\n  area: '',\n  collectedStart: '',\n  collectedEnd: '',\n  collector: '',\n  detector: '',\n\n  tableData: null,\n  options: {\n    family: [],\n    genus: [],\n    kind: [],\n    country: [],\n    region: [],\n    area: [],\n  }\n};\n\n\nfunction restFetch(method, data = {}) {\n    return fetch(\"http:\\/\\/fescobalt.com/botanic/rest.php\" + '?method=' + method, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n    }).then(response => response.json());\n}\n\nclass App extends React.Component {\n  state = startState;\n\n  constructor(props) {\n    super(props);\n\n    restFetch('getTypes')\n    .then(json => {\n      this.setState({ options: json});\n    });\n\n    restFetch('getTable', startState)\n    .then(json => this.setState({ tableData: json.table }));\n  }\n\n  filterUpdate = () => {\n    restFetch('getTable', this.state)\n    .then(json => this.setState({ tableData: json.table }));\n  };\n\n  filterClear = () => {\n    this.setState({\n      family: '',\n      genus: '',\n      kind: '',\n      country: '',\n      region: '',\n      area: '',\n      collectedStart: '',\n      collectedEnd: '',\n      collector: '',\n      detector: ''\n    }, () => this.filterUpdate());\n\n  }\n\n  render() {\n    return (<>\n      <div className=\"buttons-block\">\n        <h2>Фильтр значений</h2>\n        <div className=\"filters\">\n          <div className=\"selector\">\n            <div>Семейство</div>\n            <Select\n              value={this.state.family}\n              onChange={(e) => this.setState({ family: e })}\n              isSearchable\n              placeholder=\"Выберите вариант\"\n              options={this.state.options.family} />\n          </div>\n          <div className=\"selector\">\n            <div>Род</div>\n            <Select \n              value={this.state.genus}\n              onChange={(e) => this.setState({ genus: e })}\n              isSearchable\n              placeholder=\"Выберите вариант\"\n              options={this.state.options.genus} />\n          </div>\n          <div className=\"selector\">\n            <div>Вид</div>\n            <Select \n              value={this.state.kind}\n              onChange={(e) => this.setState({ kind: e })}\n              isSearchable\n              placeholder=\"Выберите вариант\"\n              options={this.state.options.kind} />\n          </div>\n        </div>\n\n        <br/>\n\n        <div className=\"selector\">\n          <div>Страна</div>\n          <Select \n              value={this.state.country}\n              onChange={(e) => this.setState({ country: e })}\n              isSearchable\n              placeholder=\"Выберите вариант\"\n              options={this.state.options.country} />\n        </div>\n        <div className=\"selector\">\n          <div>Регион</div>\n          <Select \n              value={this.state.region}\n              onChange={(e) => this.setState({ region: e })}\n              isSearchable\n              placeholder=\"Выберите вариант\"\n              options={this.state.options.region} />\n        </div>\n        <div className=\"selector\">\n          <div>Район</div>\n          <Select \n              value={this.state.area}\n              onChange={(e) => this.setState({ area: e })}\n              isSearchable\n              placeholder=\"Выберите вариант\"\n              options={this.state.options.area} />\n        </div>\n        <br/>\n        <div className=\"selector\">\n          <div>Дата сбора (начало)</div>\n          <input \n            type=\"date\" \n            onChange={ (e) => this.setState({collectedStart: e.target.value }) }\n            value={this.state.collectedStart} />\n        </div>\n        <div className=\"selector\">\n          <div>Дата сбора (конец)</div>\n          <input \n            type=\"date\" \n            onChange={ (e) => this.setState({collectedEnd: e.target.value }) }\n            value={this.state.collectedEnd} />\n        </div>\n        <br/>\n        <div className=\"selector\">\n          <div>Определил(-и)</div>\n          <input \n            type=\"text\"\n            value={this.state.detector}\n            onChange={(e) => this.setState({ detector: e.target.value }) } />\n        </div>\n        <div className=\"selector\">\n          <div>Собрал(-и)</div>\n          <input \n            type=\"text\"\n            value={this.state.collector}\n            onChange={(e) => this.setState({collector: e.target.value }) } />\n        </div>\n\n        <div className=\"filter-actions\">\n          <button onClick={ this.filterUpdate }>Поиск</button>\n          <button onClick={ this.filterClear }>Очистить фильтр</button>\n          <AddForm restFetch={restFetch} />\n        </div>\n      </div>\n      <Table tableData={this.state.tableData}/>\n    </>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}